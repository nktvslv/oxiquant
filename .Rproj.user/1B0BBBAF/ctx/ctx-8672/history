document()
check()
install()
document()
load_all()
fpopdt()
document()
install()
document()
build()
install()
q()
library(devtools)
library(tidyverse)
library(furrr)
install()
q()
library(devtools)
install()
build()
library(devtools)
iinstall()
install()
q()
library(devtools)
install()
library(devtools)
install()
library(devtools)
install()
use_r("msgf")
use_r("dino")
use_r("fpop")
install()
library(tidyverse)
install()
?grepl
install()
q()
library(tidyverse)
library()
library(devtools)
install()
q()
library(tidyverse)
library(devtools)
use_r("fpop")
install()
use_r("msgf")
install()
q()
library(devtools)
library(tidyverse)
use_r("fpop")
use_r("msgf")
use_r("dino")
library(tidyverse)
library(devtools)
use_r("fpop")
use_r("dino")
use_r("msgf")
18.033827 - 1.00727649
install()
library(devtools)
library(tidyverse)
library(furrr)
use_r("fpop")
install()
use_r("dino")
use_r("msgf")
install()
library(devtools)
library(tidyverse)
library(furrr)
use_r("fpop")
install()
use_r("msgf")
install()
use_r("dino")
install()
0:3
install()
list(0:3)
list(0:3)[[1]]
install()
build()
install()
build()
document()
check()
build()
install()
document()
library(devtools)
library(tidyverse)
library(furrr)
use_r("fpop")
use_r("msgf")
use_r("dino")
q()
library(tidyverse)
library(furrr)
library(devtools)
install()
acos(0.8)
acos(0.6)
acos(0.6) * 180
q()
library(devtools)
library(tidyverse)
library(furrr)
library(ms1decon)
use_r("ms1decon.R")
document()
# assign features to unmodified psms within given tolerance
find_ms1 <- function(ms2ch, ms2mz, ms2rt, mz_tol, rt_range) {
filter(ms11,
ms1charge == ms2ch,
abs(ms1mz - ms2mz) / (ms1mz + ms2mz) * 2e6 < mz_tol,
abs(ms1rt - ms2rt) < rt_range)
}
check()
build()
install()
future_walk
?future_map()
build()
install()
use_r("extract_ms1")
install()
build()
install()
build()
install()
build()
install()
build()
install()
build()
install()
build()
install()
build()
q()
library(devtools)
install()
build()
install()
library(devtools)
library(tidyverse)
library(furrr)
library(ms1decon)
use_r("fpop")
build()
install()
build()
document()
library(devtools)
library(tidyverse)
use_r("fpop")
library(devtools)
library(tidyverse)
library(furrr)
?multisession()
availableCores()
use_r("fpop")
install()
build()
install()
build()
q()
library(devtools)
use_r("fpop")
library(devtools)
library(furrr)
library(ms1decon)
use_r("fpop")
use_r("extract_ms1")
check()
install()
build()
q()
library(devtools)
library(tidyverse)
document()
check()
remove.packages("fpop")
remove.packages("oxiquant")
document()
install()
build()
install()
build()
install()
q()
library(devtools)
library(roxygen2)
document()
check()
document()
check()
install()
build()
install()
build()
install()
build()
inst()
install()
library(furrr)
check()
install()
build()
install()
build()
install()
build()
install()
build()
?stats::filter
q()
library(devtools)
library(data.table)
install.packages("future.apply")
library(future.apply)
use_r("oxiquant")
document()
use_r("R/extract_ms1.R")
use_r("extract_ms1.R")
use_r("msgf")
library(data.table)
library(future.apply)
check()
library(data.table)
library(future.apply)
library(devtools)
check()
install()
build()
install()
build()
install()
build()
1024^3
1024^2
5*1024^3
2*1024^3
install()
build()
install()
build()
?match.arg
install()
build()
install()
build()
install()
build()
install()
document()
check()
install()
build()
install()
library(devtools)
library(data.table)
library(mzcharger)
library(devtools)
library(data.table)
library(mzcharger)
library(devtools)
library(data.table)
library(mzcharger)
install()
build()
install()
build()
q()
library(devtools)
check()
install()
build()
install()
build()
library(devtools)
library(future.apply)
library(data.table)
library(devtools)
library(data.table)
library(future.apply)
use_r("msgf")
install()
build()
library(devtools)
library(future.apply)
library(data.table)
use_r("oxiquant")
q()
library(devtools)
library(data.table)
library(future.apply)
library(devtools)
library(future.apply)
use_r("oxiquant")
use_r("extract_ms1")
use_r("msgf")
install()
check()
install()
print("hello", "nikita")
print(paste("hello", "nikita"))
install()
build()
q()
library(devtools)
library(data.table)
library(future.apply)
check()
document()
check()
install()
build()
install()
build()
inst()
install()
build()
q()
library(devtools)
library(data.table)
library(future.apply)
check()
install()
methods(print)
methods(mzR::spectra)
?methods
install()
library(devtoools)
library(devtools)
library(data.table)
library(future.apply)
use_r("oxiquant")
install()
q()
library(devtools)
library(data.table)
library()
library(future.apply)
install()
q()
library(devtools)
library(data.table)
library(future.apply)
install()
q()
library(devtools)
library(data.table)
library(future.apply)
library(devtools)
library(data.table)
library(future.apply)
install()
q()
library(devtools)
library(data.table)
library(future.apply)
check()
install()
q()
install()
library(devtools)
install()
?quantile()
install()
q()
library(devtools)
library(data.table)
library(future.apply)
use_r("oxiquant")
q()
library(devtools)
library(data.table)
library(future.apply)
library(devtools)
install()
library(devtools)
library(Rcpp)
library(data.table)
library(future.apply)
install()
a <- c(10, 34, 45, 23, 14)
rank(a)
rank(-a)
install()
build()
install()
build()
document()
install()
build()
a <- list(list(0,1), list(2,3))
length(a)
length(unlist(a))
unlist(a)
install()
?mapply
R.version
1:length(a)
R.version$os
grepl("mingw", R.version$os)
grepl("darwin", R.version$os)
library(parallel)
ifelse(test = grepl("mingw", R.version$os),
yes = ifelse(detectCores() > 1, detectCores()/2, 1L),
no = 1L)
ifelse(test = !grepl("mingw", R.version$os),
yes = ifelse(detectCores() > 1, detectCores()/2, 1L),
no = 1L)
install()
check()
document()
install()
build()
install()
build()
install()
?cumsum
cummax(c(3:1, 2:0, 4:2))
3:1
install()
library(future.apply)
document()
check()
document()
install()
build()
install()
build()
install()
build()
install()
build()
install()
q()
install.packages("tidyr")
install.packages("tidyverse")
install.packages(c("data.table","Rcpp","future.apply"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mzR")
BiocManager::install("mzID")
install.packages("devtools")
library(data.table)
library(future.apply)
library(devtools)
install()
build()
use_rcpp("rcpp_functions.cpp")
install()
build()
install()
build()
install()
library(devtools)
library(data.table)
library(future.apply)
install()
?setorder
install()
library(devtools)
install()
build()
library(devtools)
library(data.table)
library(future.apply)
q()
library(devtools)
install()
build()
library(devtools)
install()
build()
check()
install()
q()
library(devtools)
library(data.table)
library(future.apply)
install()
document()
install()
,
document()
install()
q()
library(devtools)
install()
library(devtools)
install()
library(devtools)
install()
library(ddevtools)
library(devtools)
install()
build()
q()
library(devtools)
install()
build()
install()
build()
library(devtools)
